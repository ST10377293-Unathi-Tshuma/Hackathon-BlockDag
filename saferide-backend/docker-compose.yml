version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DRIVER_VERIFICATION_PORT=3002
      - PASSENGER_MANAGEMENT_PORT=3003
      - EMERGENCY_PORT=3005
      - EMERGENCY_WS_PORT=3004
      - RIDE_BOOKING_PORT=3006
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - BLOCKDAG_RPC_URL=${BLOCKDAG_RPC_URL}
      - BLOCKDAG_PRIVATE_KEY=${BLOCKDAG_PRIVATE_KEY}
      - ESCROW_CONTRACT_ADDRESS=${ESCROW_CONTRACT_ADDRESS}
      - DRIVER_VERIFICATION_CONTRACT_ADDRESS=${DRIVER_VERIFICATION_CONTRACT_ADDRESS}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - driver-verification
      - passenger-management
      - emergency-service
      - ride-booking
    restart: unless-stopped
    networks:
      - saferide-network

  # Driver Verification Service
  driver-verification:
    build: .
    command: ["node", "dist/services/driverVerification.js"]
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DRIVER_VERIFICATION_PORT=3002
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - BLOCKDAG_RPC_URL=${BLOCKDAG_RPC_URL}
      - BLOCKDAG_PRIVATE_KEY=${BLOCKDAG_PRIVATE_KEY}
      - DRIVER_VERIFICATION_CONTRACT_ADDRESS=${DRIVER_VERIFICATION_CONTRACT_ADDRESS}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: unless-stopped
    networks:
      - saferide-network

  # Passenger Management Service
  passenger-management:
    build: .
    command: ["node", "dist/services/passengerManagement.js"]
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PASSENGER_MANAGEMENT_PORT=3003
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - saferide-network

  # Emergency Service
  emergency-service:
    build: .
    command: ["node", "dist/services/emergency.js"]
    ports:
      - "3005:3005"
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - EMERGENCY_PORT=3005
      - EMERGENCY_WS_PORT=3004
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - saferide-network

  # Ride Booking Service
  ride-booking:
    build: .
    command: ["node", "dist/services/rideBooking.js"]
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - RIDE_BOOKING_PORT=3006
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - BLOCKDAG_RPC_URL=${BLOCKDAG_RPC_URL}
      - BLOCKDAG_PRIVATE_KEY=${BLOCKDAG_PRIVATE_KEY}
      - ESCROW_CONTRACT_ADDRESS=${ESCROW_CONTRACT_ADDRESS}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - saferide-network

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - saferide-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
    restart: unless-stopped
    networks:
      - saferide-network

volumes:
  redis-data:
    driver: local

networks:
  saferide-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16